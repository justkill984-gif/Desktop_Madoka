import random
from PyQt5.QtWidgets import QMainWindow, QWidget, QVBoxLayout, QLabel
from PyQt5.QtCore import Qt, QTimer, QPropertyAnimation, QEasingCurve, QSize
from PyQt5.QtGui import QPixmap
from config import POPUP_MESSAGES
from utils import get_available_memes, get_screen_geometry

class PopupMessage(QMainWindow):
    def __init__(self, on_close=None, pet_position=None, pet_size=None):
        super().__init__()
        self.on_close_callback = on_close
        self.pet_position = pet_position  # QPoint —Å –ø–æ–∑–∏—Ü–∏–µ–π –ø–∏—Ç–æ–º—Ü–∞
        self.pet_size = pet_size          # QSize —Å —Ä–∞–∑–º–µ—Ä–æ–º –ø–∏—Ç–æ–º—Ü–∞
        self.content_type = None
        self.content = None
        self.setup_ui()
        self.setup_animation()
        
    def setup_ui(self):
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Tool)
        self.setAttribute(Qt.WA_TranslucentBackground)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.determine_content()
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        central_widget.setObjectName("central_widget")
        central_widget.setStyleSheet("""
            QWidget#central_widget {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                            stop:0 rgba(255, 105, 180, 180), 
                                            stop:1 rgba(186, 85, 211, 180));
                border-radius: 15px;
                border: 2px solid rgba(255, 105, 180, 200);
            }
        """)
        self.setCentralWidget(central_widget)
        
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if self.content_type == "image":
            self.setup_image_content(layout)
        else:
            self.setup_text_content(layout)
            
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        self.adjust_size()
        
    def determine_content(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if random.random() < 0.3 and get_available_memes():
            self.content_type = "image"
            self.content = random.choice(get_available_memes())
        else:
            self.content_type = "text"
            self.content = random.choice(POPUP_MESSAGES)
            
    def setup_image_content(self, layout):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        image_label = QLabel()
        pixmap = QPixmap(self.content)
        
        if not pixmap.isNull():
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã—Å–æ—Ç–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–∞ 400px
            original_size = pixmap.size()
            max_height = 400
            
            if original_size.height() > max_height:
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —à–∏—Ä–∏–Ω—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                scaled_width = int(original_size.width() * max_height / original_size.height())
                scaled_pixmap = pixmap.scaled(scaled_width, max_height, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                image_label.setPixmap(scaled_pixmap)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
                image_label.setPixmap(pixmap)
        else:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            self.content_type = "text"
            self.content = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üò¢"
            self.setup_text_content(layout)
            return
            
        image_label.setAlignment(Qt.AlignCenter)
        image_label.setStyleSheet("background: transparent;")
        image_label.setMinimumSize(1, 1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        layout.addWidget(image_label)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        caption_label = QLabel("–°–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π —Å–º–µ—à–Ω–æ–π –º–µ–º! üòÑ")
        caption_label.setAlignment(Qt.AlignCenter)
        caption_label.setStyleSheet("""
            QLabel {
                color: white;
                font-size: 12px;
                background: transparent;
                padding: 5px;
                text-shadow: 0 0 5px rgba(255, 105, 180, 150);
            }
        """)
        caption_label.setWordWrap(True)
        layout.addWidget(caption_label)
        
    def setup_text_content(self, layout):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
        text_label = QLabel(self.content)
        text_label.setAlignment(Qt.AlignCenter)
        text_label.setStyleSheet("""
            QLabel {
                color: white;
                font-size: 14px;
                background: transparent;
                padding: 10px;
                text-shadow: 0 0 5px rgba(255, 105, 180, 150);
            }
        """)
        text_label.setWordWrap(True)
        text_label.setMinimumWidth(200)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        text_label.setMaximumWidth(500)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        layout.addWidget(text_label)
        
    def adjust_size(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –≤–∏–¥–∂–µ—Ç–æ–≤
        QTimer.singleShot(50, self._perform_adjust_size)
        
    def _perform_adjust_size(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–π–∫—É —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_size = self.centralWidget().sizeHint()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ —Ä–∞–º–∫–∏
        margin = 30  # –û—Ç—Å—Ç—É–ø—ã + —Ä–∞–º–∫–∏
        new_width = content_size.width() + margin
        new_height = content_size.height() + margin
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        min_width = 250
        max_width = 600
        min_height = 100
        max_height = 500  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        new_width = max(min_width, min(new_width, max_width))
        new_height = max(min_height, min(new_height, max_height))
        
        self.setFixedSize(new_width, new_height)
        
        # –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ–∫–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∏—Ç–æ–º—Ü–∞
        self.position_relative_to_pet()
        
    def position_relative_to_pet(self):
        """–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∏—Ç–æ–º—Ü–∞ —Å —É—á–µ—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü —ç–∫—Ä–∞–Ω–∞"""
        if not self.pet_position or not self.pet_size:
            return
            
        screen_geometry = get_screen_geometry()
        popup_width = self.width()
        popup_height = self.height()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–∏—Ç–æ–º—Ü–∞, –≤—ã—Ä–æ–≤–Ω–µ–Ω–Ω—É—é –ø–æ "–≥–æ–ª–æ–≤–µ" (–ø—Ä–∏–º–µ—Ä–Ω–æ 60px –æ—Ç –≤–µ—Ä—Ö–∞)
        target_x = self.pet_position.x() + self.pet_size.width() + 10
        target_y = self.pet_position.y() + 60  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ "–≥–æ–ª–æ–≤–µ" –ø–∏—Ç–æ–º—Ü–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –æ–∫–Ω–æ –∑–∞ –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É —ç–∫—Ä–∞–Ω–∞
        if target_x + popup_width > screen_geometry.width():
            # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–≤–∞ –æ—Ç –ø–∏—Ç–æ–º—Ü–∞
            target_x = self.pet_position.x() - popup_width - 10
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –æ–∫–Ω–æ –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —ç–∫—Ä–∞–Ω–∞
        if target_y + popup_height > screen_geometry.height():
            # –ü–æ–¥–Ω–∏–º–∞–µ–º –æ–∫–Ω–æ –≤—ã—à–µ
            target_y = screen_geometry.height() - popup_height - 10
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –æ–∫–Ω–æ –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —ç–∫—Ä–∞–Ω–∞
        if target_y < 0:
            # –û–ø—É—Å–∫–∞–µ–º –æ–∫–Ω–æ –Ω–∏–∂–µ
            target_y = 10
            
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–∫–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É
        if target_x < 0:
            target_x = 10
            
        self.move(target_x, target_y)
        
    def setup_animation(self):
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        self.animation = QPropertyAnimation(self, b"windowOpacity")
        self.animation.setDuration(800)
        self.animation.setStartValue(0.0)
        self.animation.setEndValue(1.0)
        self.animation.setEasingCurve(QEasingCurve.OutBack)
        self.animation.start()
        
        # –ü–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        self.animation.finished.connect(
            lambda: QTimer.singleShot(4000, self.fade_out)
        )
        
    def fade_out(self):
        self.animation = QPropertyAnimation(self, b"windowOpacity")
        self.animation.setDuration(800)
        self.animation.setStartValue(1.0)
        self.animation.setEndValue(0.0)
        self.animation.setEasingCurve(QEasingCurve.InBack)
        self.animation.finished.connect(self.close)
        self.animation.start()
        
    def closeEvent(self, event):
        if self.on_close_callback:
            self.on_close_callback()
        super().closeEvent(event)