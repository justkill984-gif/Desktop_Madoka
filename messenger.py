import random
import os
import json
from datetime import datetime
from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QLabel, QLineEdit, QPushButton, QScrollArea, QFrame,
                             QApplication, QFileDialog, QGridLayout, QScrollBar,
                             QMenu, QAction, QMessageBox)
from PyQt5.QtCore import Qt, QPoint, QTimer, QPropertyAnimation, QEasingCurve
from PyQt5.QtGui import QMouseEvent, QFont, QPixmap, QMovie, QIcon
from PyQt5.Qt import QSize
from utils import get_available_punishment, get_available_emojis

class LockScreen(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setup_ui()
        self.showFullScreen()
        
    def setup_ui(self):
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        
        central_widget = QWidget()
        central_widget.setStyleSheet("background: rgba(0, 0, 0, 0.95);")
        self.setCentralWidget(central_widget)
        
        layout = QVBoxLayout(central_widget)
        layout.setAlignment(Qt.AlignCenter)
        layout.setSpacing(20)
        
        # –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        punishment_path = random.choice(get_available_punishment())
        image_label = QLabel()
        
        pixmap = self.create_punishment_image(punishment_path)
        image_label.setPixmap(pixmap)
        image_label.setAlignment(Qt.AlignCenter)
        image_label.setStyleSheet("background: transparent;")
        
        message_label = QLabel("üîí –î–æ–∏–≥—Ä–∞–ª—Å—è, –õ–æ–ª–∏–∫–æ–Ω—â–∏–∫ –Ω–µ—Å—á–∞—Å—Ç–Ω—ã–π!")
        message_label.setStyleSheet("""
            color: red;
            font-size: 36px;
            font-weight: bold;
            background: transparent;
            padding: 30px;
            border: 3px solid red;
            border-radius: 20px;
        """)
        message_label.setAlignment(Qt.AlignCenter)
        
        timer_label = QLabel("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑: 60 —Å–µ–∫—É–Ω–¥")
        timer_label.setObjectName("timer_label")
        timer_label.setStyleSheet("""
            color: white;
            font-size: 24px;
            font-weight: bold;
            background: transparent;
            margin-top: 10px;
        """)
        timer_label.setAlignment(Qt.AlignCenter)
        
        layout.addWidget(image_label)
        layout.addWidget(message_label)
        layout.addWidget(timer_label)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        self.seconds_remaining = 60
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_timer)
        self.timer.start(1000)
   
    def create_punishment_image(self, punishment_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        pixmap = QPixmap(punishment_path)
        if pixmap.isNull():
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
            size = QSize(300, 200)
            fallback_pixmap = QPixmap(size)
            fallback_pixmap.fill(Qt.red)
            return fallback_pixmap
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        return pixmap.scaled(300, 200, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        
    def update_timer(self):
        self.seconds_remaining -= 1
        timer_label = self.findChild(QLabel, "timer_label")
        if timer_label:
            timer_label.setText(f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑: {self.seconds_remaining} —Å–µ–∫—É–Ω–¥")
        
        if self.seconds_remaining <= 0:
            self.timer.stop()
            self.animate_close()
            
    def animate_close(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –æ–∫–Ω–∞"""
        self.animation = QPropertyAnimation(self, b"windowOpacity")
        self.animation.setDuration(500)
        self.animation.setStartValue(1.0)
        self.animation.setEndValue(0.0)
        self.animation.setEasingCurve(QEasingCurve.OutCubic)
        self.animation.finished.connect(self.close)
        self.animation.start()

class ChatMessageWidget(QWidget):
    def __init__(self, content, is_user=True, timestamp=None, content_type="text"):
        super().__init__()
        self.content = content
        self.is_user = is_user
        self.content_type = content_type  # "text", "emoji", "gif"
        self.timestamp = timestamp or datetime.now()
        self.setup_ui()
        
    def setup_ui(self):
        layout = QHBoxLayout()
        layout.setContentsMargins(10, 5, 10, 5)
        
        if self.is_user:
            layout.addStretch()
            
        message_frame = QFrame()
        message_frame.setObjectName("message_frame")
        message_layout = QVBoxLayout(message_frame)
        message_layout.setContentsMargins(12, 8, 12, 8)
        message_layout.setAlignment(Qt.AlignCenter)
        
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
        if self.content_type == "text":
            content_widget = QLabel(self.content)
            content_widget.setWordWrap(True)
            content_widget.setMaximumWidth(300)
            content_widget.setTextInteractionFlags(Qt.TextSelectableByMouse)
            content_widget.setStyleSheet("color: white; background: transparent; font-size: 12px;")
        elif self.content_type == "emoji":
            content_widget = QLabel()
            content_widget.setAlignment(Qt.AlignCenter)
            content_widget.setMaximumSize(100, 100)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
            pixmap = QPixmap(self.content)
            if not pixmap.isNull():
                pixmap = pixmap.scaled(80, 80, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                content_widget.setPixmap(pixmap)
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–º–æ–¥–∑–∏
                content_widget.setText("üòä")
                content_widget.setStyleSheet("font-size: 24px; color: white; background: transparent;")
        elif self.content_type == "gif":
            content_widget = QLabel()
            content_widget.setAlignment(Qt.AlignCenter)
            content_widget.setMaximumSize(200, 150)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º GIF
            movie = QMovie(self.content)
            movie.setScaledSize(QSize(150, 100))
            content_widget.setMovie(movie)
            movie.start()
        
        time_label = QLabel(self.timestamp.strftime("%H:%M"))
        time_label.setAlignment(Qt.AlignRight)
        time_label.setStyleSheet("color: rgba(255, 255, 255, 180); font-size: 10px; background: transparent;")
        
        message_layout.addWidget(content_widget)
        message_layout.addWidget(time_label)
        
        if self.is_user:
            message_frame.setStyleSheet("""
                QFrame#message_frame {
                    background: rgba(0, 123, 255, 180);
                    border-radius: 15px;
                    border-bottom-right-radius: 5px;
                    border: 1px solid rgba(255, 255, 255, 100);
                }
            """)
        else:
            message_frame.setStyleSheet("""
                QFrame#message_frame {
                    background: rgba(255, 255, 255, 120);
                    border-radius: 15px;
                    border-bottom-left-radius: 5px;
                    border: 1px solid rgba(255, 255, 255, 80);
                }
                QLabel {
                    color: black;
                }
            """)
        
        layout.addWidget(message_frame)
        
        if not self.is_user:
            layout.addStretch()
            
        self.setLayout(layout)

class EmojiPicker(QMainWindow):
    def __init__(self, messenger_window):
        super().__init__()
        self.messenger_window = messenger_window
        self.setup_ui()
        self.setup_animations()
        
    def setup_ui(self):
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setFixedSize(300, 200)
        
        central_widget = QWidget()
        central_widget.setObjectName("central_widget")
        self.setCentralWidget(central_widget)
        
        self.setStyleSheet("""
            QMainWindow {
                background: transparent;
            }
            QWidget#central_widget {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                            stop:0 rgba(255, 105, 180, 200), 
                                            stop:1 rgba(186, 85, 211, 200));
                border-radius: 15px;
                border: 2px solid rgba(255, 105, 180, 220);
            }
        """)
        
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(10, 10, 10, 10)
        
        title_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏:")
        title_label.setStyleSheet("""
            color: white; 
            font-size: 14px; 
            font-weight: bold;
            background: transparent;
            text-shadow: 0 0 5px rgba(255, 105, 180, 150);
        """)
        layout.addWidget(title_label)
        
        # –°–µ—Ç–∫–∞ –¥–ª—è —ç–º–æ–¥–∑–∏
        emoji_grid = QGridLayout()
        emoji_grid.setSpacing(5)
        
        available_emojis = get_available_emojis()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 12 —ç–º–æ–¥–∑–∏ (3x4)
        for i, emoji_path in enumerate(available_emojis[:12]):
            row = i // 4
            col = i % 4
            
            emoji_btn = QPushButton()
            emoji_btn.setFixedSize(50, 50)
            emoji_btn.setStyleSheet("""
                QPushButton {
                    background: rgba(255, 255, 255, 120);
                    border: 1px solid rgba(255, 255, 255, 80);
                    border-radius: 10px;
                }
                QPushButton:hover {
                    background: rgba(255, 193, 7, 180);
                    border: 1px solid rgba(255, 193, 7, 220);
                }
            """)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
            pixmap = QPixmap(emoji_path)
            if not pixmap.isNull():
                pixmap = pixmap.scaled(30, 30, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                icon = QIcon(pixmap)
                emoji_btn.setIcon(icon)
                emoji_btn.setIconSize(QSize(30, 30))
            
            emoji_btn.clicked.connect(lambda checked, path=emoji_path: self.send_emoji(path))
            emoji_grid.addWidget(emoji_btn, row, col)
        
        layout.addLayout(emoji_grid)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.setStyleSheet("""
            QPushButton {
                background: rgba(255, 105, 180, 180);
                color: white;
                border: none;
                border-radius: 10px;
                padding: 8px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: rgba(255, 105, 180, 220);
                border: 1px solid white;
            }
        """)
        close_btn.clicked.connect(self.close_window)
        layout.addWidget(close_btn)
        
    def setup_animations(self):
        self.animation = QPropertyAnimation(self, b"windowOpacity")
        self.animation.setDuration(300)
        self.animation.setStartValue(0.0)
        self.animation.setEndValue(1.0)
        self.animation.setEasingCurve(QEasingCurve.OutCubic)
        self.animation.start()
        
    def close_window(self):
        self.animation = QPropertyAnimation(self, b"windowOpacity")
        self.animation.setDuration(300)
        self.animation.setStartValue(1.0)
        self.animation.setEndValue(0.0)
        self.animation.setEasingCurve(QEasingCurve.InCubic)
        self.animation.finished.connect(self.close)
        self.animation.start()
        
    def send_emoji(self, emoji_path):
        if self.messenger_window:
            self.messenger_window.add_message(emoji_path, True, "emoji")
            QTimer.singleShot(1000, self.messenger_window.pet_response)
        self.close_window()

class ChatHistoryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞"""
    
    def __init__(self, filename="chat_history.json"):
        self.filename = filename
        self.history = []
        self.max_history_size = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        self.load_history()
    
    def load_history(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.filename):
                with open(self.filename, 'r', encoding='utf-8') as f:
                    self.history = json.load(f)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                if len(self.history) > self.max_history_size:
                    self.history = self.history[-self.max_history_size:]
            else:
                self.history = []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
            self.history = []
    
    def save_history(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump(self.history, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
    
    def add_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if 'timestamp' in message and isinstance(message['timestamp'], datetime):
            message['timestamp'] = message['timestamp'].isoformat()
        
        self.history.append(message)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.history) > self.max_history_size:
            self.history = self.history[-self.max_history_size:]
        
        self.save_history()
    
    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        self.history = []
        try:
            if os.path.exists(self.filename):
                os.remove(self.filename)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        self.save_history()
    
    def get_recent_messages(self, count=100):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        return self.history[-count:] if self.history else []

class AIChatBot:
    def __init__(self):
        self.responses = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? üíñ",
            "–ú—è—É! –Ø —Ç–∞–∫ —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üêæ",
            "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üåü",
            "–¢—ã —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –º–∏–ª! üòä",
            "–ú—É—Ä—Ä... –Ø –æ–±–æ–∂–∞—é —Å —Ç–æ–±–æ–π –≥–æ–≤–æ—Ä–∏—Ç—å! üíï",
            "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ —É —Ç–µ–±—è? üéÄ",
            "–¢—ã –ª—É—á—à–∏–π —Ö–æ–∑—è–∏–Ω –Ω–∞ —Å–≤–µ—Ç–µ! üåà",
            "–ú–Ω–µ —Ç–∞–∫ –≤–µ—Å–µ–ª–æ —Å —Ç–æ–±–æ–π! üéâ"
        ]
        
        # –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
        self.bad_word_responses = [
            "–û–π-–æ–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—è –≥–æ–≤–æ—Ä–∏—Ç—å! üòæ",
            "–ú—è—É! –ù–µ —Ä—É–≥–∞–π—Å—è! üö´",
            "–§—É-—Ñ—É, —Ç–∞–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–µ–∫—Ä–∞—Å–∏–≤–æ! üëø",
            "–Ø –æ–±–∏–∂—É—Å—å, –µ—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å —Ç–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—å! üòø"
        ]
        
    def get_response(self, user_message):
        user_message_lower = user_message.lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
        if self.contains_bad_words(user_message_lower):
            return {"type": "text", "content": random.choice(self.bad_word_responses)}
    
        # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30% –æ—Ç–≤–µ—á–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º —ç–º–æ–¥–∑–∏
        if random.random() < 0.3:
            emojis = get_available_emojis()
            if emojis:
                return {"type": "emoji", "content": random.choice(emojis)}
    
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if any(word in user_message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi']):
            responses = [
                "–ü—Ä–∏–≤–µ—Ç, —Ö–æ–∑—è–∏–Ω! üíñ –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
                "–ú—è—É! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! üêæ",
                "–û, —Ç—ã –∑–¥–µ—Å—å! –Ø —Ç–∞–∫ —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòä"
            ]
            return {"type": "text", "content": random.choice(responses)}
    
        elif any(word in user_message_lower for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ']):
            responses = [
                "–£ –º–µ–Ω—è –≤—Å–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ —Ç—ã —Ä—è–¥–æ–º! üíï",
                "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤–∞ –∏–≥—Ä–∞—Ç—å –∏ –æ–±–Ω–∏–º–∞—Ç—å—Å—è! üéÄ",
                "–ú—É—Ä-–º—É—Ä... –Ø —Å—á–∞—Å—Ç–ª–∏–≤–∞, –∫–æ–≥–¥–∞ —Ç—ã —Å–æ –º–Ω–æ–π –≥–æ–≤–æ—Ä–∏—à—å! üò∏"
        ]
            return {"type": "text", "content": random.choice(responses)}
    
        elif any(word in user_message_lower for word in ['–∫—Ä–∞—Å–∏–≤', '–º–∏–ª', '—Ö–æ—Ä–æ—à', '–ª—é–±–ª—é']):
            responses = [
                "–û–π, —Ç—ã –º–µ–Ω—è —Å–º—É—â–∞–µ—à—å! üò≥üíñ",
                "–°–ø–∞—Å–∏–±–æ! –¢—ã —Ç–æ–∂–µ —Å–∞–º—ã–π –ª—É—á—à–∏–π! üå∏",
                "–ú—É—Ä—Ä... –¢—ã –¥–µ–ª–∞–µ—à—å –º–µ–Ω—è —Ç–∞–∫–æ–π —Å—á–∞—Å—Ç–ª–∏–≤–æ–π! üíï"
            ]
            return {"type": "text", "content": random.choice(responses)}
    
        elif any(word in user_message_lower for word in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '—Å–ø–æ–∫–æ–π–Ω–æ–π']):
            responses = [
                "–ü–æ–∫–∞-–ø–æ–∫–∞! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ! üòò",
                "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ë—É–¥—É —Å–∫—É—á–∞—Ç—å! üíî",
                "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤! üåô‚ú®"
            ]
            return {"type": "text", "content": random.choice(responses)}
    
        elif any(word in user_message_lower for word in ['–µ–¥–∞', '–∫—É—à–∞—Ç—å', '–≥–æ–ª–æ–¥–µ–Ω', '–µ—Å—Ç—å']):
            responses = [
                "–Ø —É–∂–µ –ø–æ–∫—É—à–∞–ª–∞, —Å–ø–∞—Å–∏–±–æ! –ù–æ –ø–µ—á–µ–Ω–µ–∫ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–≤–∞–µ—Ç –º–Ω–æ–≥–æ! üç™",
                "–ú–º–º... –Ø –ª—é–±–ª—é —Ä—ã–±–∫—É –∏ —Å–ª–∏–≤–æ—á–∫–∏! üêüü•õ",
                "–Ø –Ω–µ –≥–æ–ª–æ–¥–Ω–∞, –Ω–æ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å–æ—Å—Ç–∞–≤–ª—é —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é! üòä"
            ]
            return {"type": "text", "content": random.choice(responses)}
    
        else:
            responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º! üí≠",
                "–ú—è—É! –Ø —Å–ª—É—à–∞—é –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ! üêæ",
                "–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ! –¢—ã –≤—Å–µ–≥–¥–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å —Ç–∞–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–µ—â–∏! üåü",
                "–ü—Ä–∞–≤–¥–∞? –≠—Ç–æ —Ç–∞–∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ! üòÆ",
                "–ú—É—Ä—Ä... –Ø –¥—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏! üíñ",
                "–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ß—Ç–æ –µ—â–µ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å? üéÄ"
            ]
            return {"type": "text", "content": random.choice(responses)}
    
    def contains_bad_words(self, text):
        bad_words = [
            '–º–∞—Ç', '–ø–ª–æ—Ö–æ–µ—Å–ª–æ–≤–æ', '—Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ',
            '–±–ª—è', '—Ö—É–π', '–ø–∏–∑–¥–∞', '–µ–±–∞—Ç—å', '–Ω–∞—Ö—É–π'
        ]
        text_lower = text.lower()
        return any(bad_word in text_lower for bad_word in bad_words)
        
class MessengerWindow(QMainWindow):
    def __init__(self, on_close=None):
        super().__init__()
        self.on_close_callback = on_close
        self.ai_bot = AIChatBot()
        self.messages = []
        self.dragging = False
        self.drag_position = QPoint()
        self.history_manager = ChatHistoryManager()
        self.setup_ui()
        self.setup_animations()
        self.load_chat_history()
        
    def setup_ui(self):
        self.setWindowTitle("–ß–∞—Ç —Å –ø–∏—Ç–æ–º—Ü–µ–º")
        self.setFixedSize(400, 500)
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        
        central_widget = QWidget()
        central_widget.setObjectName("central_widget")
        self.setCentralWidget(central_widget)
        
        self.setStyleSheet("""
            QMainWindow {
                background: transparent;
            }
            QWidget#central_widget {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                            stop:0 rgba(255, 105, 180, 180), 
                                            stop:0.5 rgba(186, 85, 211, 180),
                                            stop:1 rgba(138, 43, 226, 180));
                border-radius: 15px;
                border: 2px solid rgba(255, 105, 180, 200);
            }
        """)
        
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        title_bar = QWidget()
        title_bar.setFixedHeight(40)
        title_bar.setStyleSheet("""
            background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                                        stop:0 rgba(255, 105, 180, 200), 
                                        stop:1 rgba(186, 85, 211, 200));
            border-top-left-radius: 13px;
            border-top-right-radius: 13px;
        """)
        title_bar.mousePressEvent = self.title_mouse_press_event
        title_bar.mouseMoveEvent = self.title_mouse_move_event
        title_bar.mouseReleaseEvent = self.title_mouse_release_event
        
        title_layout = QHBoxLayout(title_bar)
        title_layout.setContentsMargins(15, 0, 15, 0)
        
        title_label = QLabel("üí¨ –ß–∞—Ç —Å –ø–∏—Ç–æ–º—Ü–µ–º")
        title_label.setStyleSheet("""
            color: white; 
            font-weight: bold; 
            font-size: 14px;
            background: transparent;
            text-shadow: 0 0 10px rgba(255, 105, 180, 150);
        """)
        
        # –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏
        history_btn = QPushButton("üìã")
        history_btn.setFixedSize(25, 25)
        history_btn.setStyleSheet("""
            QPushButton {
                background: rgba(255, 193, 7, 180);
                color: white;
                font-size: 14px;
                border: none;
                border-radius: 12px;
            }
            QPushButton:hover {
                background: rgba(255, 193, 7, 220);
                border: 1px solid white;
            }
        """)
        history_btn.clicked.connect(self.show_history_menu)
        
        close_btn = QPushButton("√ó")
        close_btn.setFixedSize(25, 25)
        close_btn.setStyleSheet("""
            QPushButton {
                background: rgba(255, 105, 180, 180);
                color: white;
                font-size: 18px;
                border: none;
                border-radius: 12px;
            }
            QPushButton:hover {
                background: rgba(255, 105, 180, 220);
                border: 1px solid white;
            }
        """)
        close_btn.clicked.connect(self.close_window)
        
        title_layout.addWidget(title_label)
        title_layout.addStretch()
        title_layout.addWidget(history_btn)
        title_layout.addWidget(close_btn)
        
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        self.scroll_area = QScrollArea()
        self.scroll_area.setObjectName("scroll_area")
        self.scroll_widget = QWidget()
        self.scroll_widget.setObjectName("scroll_widget")
        self.scroll_layout = QVBoxLayout(self.scroll_widget)
        self.scroll_layout.addStretch()
        
        self.scroll_area.setWidget(self.scroll_widget)
        self.scroll_area.setWidgetResizable(True)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.scroll_area.setStyleSheet("""
            QScrollArea#scroll_area {
                background: rgba(255, 255, 255, 50);
                border: none;
            }
            QWidget#scroll_widget {
                background: transparent;
            }
            QScrollBar:vertical {
                background: rgba(255, 255, 255, 80);
                width: 12px;
                border-radius: 6px;
                margin: 0px;
            }
            QScrollBar::handle:vertical {
                background: rgba(255, 105, 180, 160);
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background: rgba(255, 105, 180, 200);
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                border: none;
                background: none;
            }
        """)
        
        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        input_widget = QWidget()
        input_widget.setFixedHeight(60)
        input_widget.setStyleSheet("""
            background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                                        stop:0 rgba(186, 85, 211, 200), 
                                        stop:1 rgba(138, 43, 226, 200));
            border-bottom-left-radius: 13px;
            border-bottom-right-radius: 13px;
        """)
        input_layout = QHBoxLayout(input_widget)
        input_layout.setContentsMargins(15, 10, 15, 10)
        
        self.message_input = QLineEdit()
        self.message_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        self.message_input.setStyleSheet("""
            QLineEdit {
                background: rgba(255, 255, 255, 120);
                color: white;
                border: 1px solid rgba(255, 255, 255, 80);
                border-radius: 15px;
                padding: 8px 15px;
                font-size: 12px;
            }
            QLineEdit:focus {
                border: 1px solid rgba(255, 105, 180, 200);
                background: rgba(255, 255, 255, 150);
            }
            QLineEdit::placeholder {
                color: rgba(255, 255, 255, 180);
            }
        """)
        self.message_input.returnPressed.connect(self.send_message)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏
        emoji_btn = QPushButton("üòä")
        emoji_btn.setFixedSize(40, 40)
        emoji_btn.setStyleSheet("""
            QPushButton {
                background: rgba(255, 193, 7, 180);
                color: white;
                border: none;
                border-radius: 20px;
                font-size: 16px;
            }
            QPushButton:hover {
                background: rgba(255, 193, 7, 220);
                border: 1px solid white;
            }
        """)
        emoji_btn.clicked.connect(self.show_emoji_picker)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ GIF
        gif_btn = QPushButton("GIF")
        gif_btn.setFixedSize(40, 40)
        gif_btn.setStyleSheet("""
            QPushButton {
                background: rgba(156, 39, 176, 180);
                color: white;
                border: none;
                border-radius: 20px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: rgba(156, 39, 176, 220);
                border: 1px solid white;
            }
        """)
        gif_btn.clicked.connect(self.send_gif)
        
        send_btn = QPushButton("‚û§")
        send_btn.setFixedSize(40, 40)
        send_btn.setStyleSheet("""
            QPushButton {
                background: rgba(255, 105, 180, 180);
                color: white;
                border: none;
                border-radius: 20px;
                font-size: 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: rgba(255, 105, 180, 220);
                border: 1px solid white;
            }
        """)
        send_btn.clicked.connect(self.send_message)
        
        input_layout.addWidget(self.message_input)
        input_layout.addWidget(emoji_btn)
        input_layout.addWidget(gif_btn)
        input_layout.addWidget(send_btn)
        
        layout.addWidget(title_bar)
        layout.addWidget(self.scroll_area)
        layout.addWidget(input_widget)
        
    def setup_animations(self):
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        self.animation = QPropertyAnimation(self, b"windowOpacity")
        self.animation.setDuration(500)
        self.animation.setStartValue(0.0)
        self.animation.setEndValue(1.0)
        self.animation.setEasingCurve(QEasingCurve.OutCubic)
        self.animation.start()

    def title_mouse_press_event(self, event):
        if event.button() == Qt.LeftButton:
            self.dragging = True
            self.drag_position = event.globalPos() - self.frameGeometry().topLeft()
            self.setCursor(Qt.ClosedHandCursor)
            event.accept()

    def title_mouse_move_event(self, event):
        if self.dragging and event.buttons() == Qt.LeftButton:
            self.move(event.globalPos() - self.drag_position)
            event.accept()

    def title_mouse_release_event(self, event):
        self.dragging = False
        self.setCursor(Qt.ArrowCursor)
        event.accept()
        
    def close_window(self):
        # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        self.animation = QPropertyAnimation(self, b"windowOpacity")
        self.animation.setDuration(500)
        self.animation.setStartValue(1.0)
        self.animation.setEndValue(0.0)
        self.animation.setEasingCurve(QEasingCurve.InCubic)
        self.animation.finished.connect(self.close)
        self.animation.start()

    def show_history_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π"""
        menu = QMenu(self)
        menu.setStyleSheet("""
            QMenu {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                            stop:0 rgba(255, 105, 180, 200), 
                                            stop:1 rgba(186, 85, 211, 200));
                color: white;
                border: 2px solid rgba(255, 105, 180, 200);
                border-radius: 10px;
                padding: 8px;
            }
            QMenu::item {
                padding: 8px 20px;
                border-radius: 5px;
                background: transparent;
            }
            QMenu::item:selected {
                background: rgba(255, 255, 255, 0.2);
                border: 1px solid rgba(255, 255, 255, 0.3);
            }
        """)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        stats_action = QAction(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(self.history_manager.history)}", self)
        stats_action.setEnabled(False)
        menu.addAction(stats_action)
        
        menu.addSeparator()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
        export_action = QAction("üíæ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", self)
        export_action.triggered.connect(self.export_history)
        menu.addAction(export_action)
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        clear_action = QAction("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", self)
        clear_action.triggered.connect(self.clear_history)
        menu.addAction(clear_action)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
        menu.exec_(self.mapToGlobal(self.sender().pos()))
        
    def load_chat_history(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        recent_messages = self.history_manager.get_recent_messages(50)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        
        for message_data in recent_messages:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º datetime –∏–∑ —Å—Ç—Ä–æ–∫–∏
            if 'timestamp' in message_data and isinstance(message_data['timestamp'], str):
                try:
                    message_data['timestamp'] = datetime.fromisoformat(message_data['timestamp'])
                except:
                    message_data['timestamp'] = datetime.now()
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_widget = ChatMessageWidget(
                message_data['content'],
                message_data['is_user'],
                message_data['timestamp'],
                message_data['content_type']
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if message_data['is_user']:
                self.scroll_layout.insertWidget(self.scroll_layout.count() - 1, message_widget)
            else:
                self.scroll_layout.insertWidget(self.scroll_layout.count() - 1, message_widget)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.messages.append(message_data)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        if recent_messages:
            QTimer.singleShot(100, self.scroll_to_bottom)

    def export_history(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª"""
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞", "chat_history.json", "JSON Files (*.json)"
        )
        
        if file_path:
            try:
                # –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(self.history_manager.history, f, ensure_ascii=False, indent=2)
                
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {str(e)}")
                
    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        reply = QMessageBox.question(
            self, 
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.history_manager.clear_history()
            
            # –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            for i in reversed(range(self.scroll_layout.count() - 1)):
                widget = self.scroll_layout.itemAt(i).widget()
                if widget:
                    widget.setParent(None)
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.messages.clear()
            
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")

    def send_message(self):
        text = self.message_input.text().strip()
        if text:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
            if self.contains_very_bad_words(text):
                self.add_message("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤!", True, "text")
                self.message_input.clear()
                QTimer.singleShot(1000, self.activate_lock_screen)
                return
                
            self.add_message(text, True, "text")
            self.message_input.clear()
            QTimer.singleShot(1000, self.pet_response)
            
    def show_emoji_picker(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏"""
        self.emoji_picker = EmojiPicker(self)
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ–∫–Ω–æ —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π —ç–º–æ–¥–∑–∏
        emoji_btn_pos = self.sender().mapToGlobal(QPoint(0, 0))
        self.emoji_picker.move(emoji_btn_pos.x() - 250, emoji_btn_pos.y() - 200)
        self.emoji_picker.show()
        
    def send_gif(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ GIF"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ GIF", "", "GIF Files (*.gif)"
        )
        if file_path:
            self.add_message(file_path, True, "gif")
            QTimer.singleShot(1000, self.pet_response)
            
    def contains_very_bad_words(self, text):
        very_bad_words = [
            '–±–ª—è', '—Ö—É–π', '–ø–∏–∑–¥–∞', '–µ–±–∞—Ç—å', '–Ω–∞—Ö—É–π', '–µ–±–ª–∞–Ω',
            '—Å—É–∫–∞', '–º—É–¥–∞–∫', '–≥–æ–Ω–¥–æ–Ω', '–∑–∞–ª—É–ø–∞', '–¥—Ä–æ—á–∏—Ç—å'
        ]
        text_lower = text.lower()
        return any(bad_word in text_lower for bad_word in very_bad_words)
        
    def activate_lock_screen(self):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        self.lock_screen = LockScreen()
        self.lock_screen.show()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∏—Ç–æ–º—Ü–∞
        punishment_responses = [
            "–Ø –æ—á–µ–Ω—å —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–∞ —Ç–≤–æ–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º! üòæ",
            "–¢–∞–∫ —Å —Ç–æ–±–æ–π –Ω–∏–∫—Ç–æ –Ω–µ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å! üëø",
            "–ú–Ω–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç—å —Ç–µ–±—è... üòø",
            "–¢—ã –æ–≥–æ—Ä—á–∏–ª –º–µ–Ω—è —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏! üíî"
        ]
        punishment_message = random.choice(punishment_responses)
        self.add_message(punishment_message, False, "text")
            
    def add_message(self, content, is_user, content_type):
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            'content': content,
            'is_user': is_user,
            'content_type': content_type,
            'timestamp': datetime.now()
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_widget = ChatMessageWidget(
            content, is_user, message_data['timestamp'], content_type
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if is_user:
            self.scroll_layout.insertWidget(self.scroll_layout.count() - 1, message_widget)
        else:
            self.scroll_layout.insertWidget(self.scroll_layout.count() - 1, message_widget)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.messages.append(message_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.history_manager.add_message(message_data)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        QTimer.singleShot(100, self.scroll_to_bottom)
        
    def pet_response(self):
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_message = ""
        if self.messages:
            last_msg = self.messages[-1]
            if last_msg['is_user'] and last_msg['content_type'] == "text":
                user_message = last_msg['content']
                
        response = self.ai_bot.get_response(user_message)
        self.add_message(response["content"], False, response["type"])
        
    def scroll_to_bottom(self):
        scrollbar = self.scroll_area.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
    
    def closeEvent(self, event):
        if self.on_close_callback:
            self.on_close_callback()
        super().closeEvent(event)